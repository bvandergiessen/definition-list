'use strict';

var obsidian = require('obsidian');
var view = require('@codemirror/view');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const defaultSettings = {
    dtcolor: '#555577',
    dtbold: true,
    dtitalic: false,
    ddindentation: 30
};
const definitionMarker = /(?:^|\n): {3}/;
const MARKER = ':   ';
/* 1. The main class, instantiated by Obsidian when the plugin loads */
class DefinitionListPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.cssElement = document.createElement('style');
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Loading plugin ${this.manifest.name} v${this.manifest.version}`);
            this.settings = Object.assign({}, defaultSettings, yield this.loadData());
            this.cssElement.textContent = `:root {
			--dtcolor: ${this.settings.dtcolor};
			--dtweight: ${this.settings.dtbold ? 'bold' : 'inherit'};
			--dtstyle: ${this.settings.dtitalic ? 'italic' : 'inherit'};
			--ddindentation: ${this.settings.ddindentation}px;	
		}`;
            document.head.appendChild(this.cssElement);
            this.registerEditorExtension(liveUpdateDefinitionLists);
            this.registerMarkdownPostProcessor(postProcessDefinitionLists, 99);
            this.addSettingTab(new DefinitionListSettingTab(this.app, this));
        });
    }
    onunload() {
        console.log(`Unloading plugin ${this.manifest.name}`);
        if (this.cssElement)
            this.cssElement.remove();
    }
}
/* 2. The ViewPlugin that works in Edit Mode. */
const liveUpdateDefinitionLists = view.ViewPlugin.fromClass(
/* The ViewPlugin class is generic: it requires an underlying type, a subclass of
 * the PluginValue class. That is to be the first argument passed into the class
 * method .fromClass() which returns a ViewPlugin instance with that underlying
 * type. The second argument of that class method, to give additional details,
 * is a PluginSpec instance with the same underlying type. It has zero or more
 * of the properties eventHandlers, eventObservers, provide, and decorations.
 * The latter is a function that, when passed an instance of the underlying
 * class, returns a DecorationSet - in this case the function simply returns
 * the .decorations instance property. */
class {
    constructor(view$1) {
        this.TERM_CLASS = 'view-dt';
        this.DEF_CLASS = 'view-dd';
        this.MARKER_CLASS = 'view-dd-marker';
        this.TERM_DEC = view.Decoration.line({ class: this.TERM_CLASS });
        this.DEF_DEC = view.Decoration.line({ class: this.DEF_CLASS });
        this.MARKER_DEC = view.Decoration.mark({ class: this.MARKER_CLASS });
        this.never_updated = true;
        this.decorations = view.Decoration.none;
        console.debug(`live updater for ${view$1.state.doc.line(1).text} started`);
    }
    /* this.decorations type, DecorationSet, is a RangeSet of items of the underlying
     * type Decoration. Such a RangeSet object has properties and methods
     * .size (number of elements); .iter() with optional arg from, an offset that
     * lies in or before the first to be iterated; .update(RangeSetUpdate) to add
     * or remove them (returns the new version); .between(from, to, func) run func
     * on every Decoration between the offsets from and to; .map(ChangeDesc). */
    /* the boolean VieuwUpdate properties that may be useful:
     *  .viewportChanged: viewport or visible ranges have changed
     *  .geometryChanged: editor size or the document itself changed
     *  .focusChanged: maybe some switch to another document, panel etc.;
     *  change in View between Editing and Rendering view; but
     *  when the document/Editing is activated, .geometryChanged is also true.
     * One change from Reading to Editing view triggered at one time:
     * viewportChanged, viewportMoved, heightChanged, geometryChanged; then
     * heightChanged, geometryChanged; then focusChanged; then heightChanged
     * and geometryChanged twice. Either we only use focus and viewport or
     * we debounce certain events.
     * Launching Obsidian with a document open: lots and lots; viewportChanged once.
     * Switching to an open doc for the first time after restart: instantiates
     * this class => use the constructor for this
     */
    update(update) {
        var _a;
        console.debug(Date());
        for (let i of ['viewportChanged', 'viewportMoved', 'heightChanged',
            'geometryChanged', 'focusChanged', 'docChanged', 'selectionSet']) {
            if (update[i])
                console.debug(i);
        }
        update.changes.iterChanges(console.debug, true);
        /* viewportChanged means the whole DecorationSet must be completely
         * re-done from scratch, so if that event is part of the update,
         * only do that. Also, the first time Edit View is active. */
        if (update.viewportChanged ||
            (this.never_updated && update.view.contentDOM.isShown())) {
            const docText = update.state.doc;
            const newDecorations = [];
            for (let range of update.view.visibleRanges) {
                // multiple ranges are always in document order, but the border
                // between them may fall within a line
                console.debug(range);
                let previousLine = null;
                for (let lnr = docText.lineAt(range.from).number; lnr <= docText.lineAt(range.to).number; lnr++) {
                    const line = docText.line(lnr);
                    // if the current line is a definition
                    if (line.text.startsWith(MARKER)) {
                        // a line may occur in more than one of the ranges; add it once
                        if (((_a = newDecorations.last()) === null || _a === void 0 ? void 0 : _a.from) == line.from)
                            continue;
                        if ((previousLine === null || previousLine === void 0 ? void 0 : previousLine.length) && !previousLine.text.startsWith(MARKER))
                            newDecorations.push(this.TERM_DEC.range(previousLine.from));
                        // FIXME: if previous line is e.g. a list, this fails
                        newDecorations.push(this.DEF_DEC.range(line.from), // linedec anchored on start
                        this.MARKER_DEC.range(line.from, line.from + 4));
                    }
                    previousLine = line; // preserve the line for the next round
                }
            }
            console.debug(newDecorations);
            this.decorations = view.Decoration.none.update({ add: newDecorations });
            this.never_updated = false;
            return;
        }
        /* docChanged is usually simple: the .map method updates all offsets
         * beyond the insertion or deletion. But it gets complicated when the
         * edit happens inside a marker, or when the line suddenly has one. */
        if (update.docChanged) {
            // Map the existing decorations through the changes
            this.decorations = this.decorations.map(update.changes);
            // TODO: code for when a marker is added or destroyed
        }
        console.debug('---------------');
        // else if (update.geometryChanged) console.log('geometry changed');
    }
}, {
    decorations: v => v.decorations,
});
/* 3. The MarkdownPostProcessor that prepares Reading View and PDF export. */
const postProcessDefinitionLists = function (element, context) {
    /* This post-processor is called
     *  - when the document first enters Reading view: on every child-div of page div
     *  - when switching to Reading view: once per div that has changed
     *  - when exporting to PDF: on the whole page div */
    // console.debug(element.outerHTML);
    /* In Reading View, the element passed in IS a single <div>;
     * in PDF output, it is the PARENT ELEMENT of all the <div>s.
     * First check if the element has class 'el-p' (Reading-view paragraph)
     * or 'markdown-rendered' (PDF-output root element).
     * If neither, return immediately.  */
    if (!element.classList.contains('el-p') &&
        !element.classList.contains('el-ul') &&
        !element.classList.contains('el-ol') &&
        !element.classList.contains('markdown-rendered'))
        return;
    // it's one paragraph (in Reading View), or the whole document (PDF)
    let preChecked = false;
    if (element.classList.contains('el-p')) { // Reading View paragraph
        if (!element.firstElementChild.innerHTML.match(definitionMarker))
            return;
        // console.debug('Now we will create the modified paragraph:');
        // console.debug(element.textContent);
        preChecked = true;
    }
    if (element.classList.contains('el-ul') || element.classList.contains('el-ol')) { // list. Is there a <dd> at the end?
        if (!element.firstElementChild.lastElementChild.innerHTML.contains('\n'))
            return;
        const originalHTML = element.firstElementChild.lastElementChild
            .innerHTML;
        const newlinePos = originalHTML.indexOf('\n');
        element.firstElementChild.lastElementChild.innerHTML =
            originalHTML.slice(0, newlinePos);
        element.appendChild(document.createElement('p')).innerHTML =
            originalHTML.slice(newlinePos + 1);
        preChecked = true;
    }
    /* This Promise gets no content; the only use of its fulfillment
     * is to signal to the receiving process that we're done
     * editing its DOM */
    return new Promise((resultCallback) => {
        let paragraphs;
        if (preChecked)
            paragraphs = [element.lastElementChild];
        else
            paragraphs = element.findAll(':scope > div > p');
        paragraphs.forEach((par) => {
            if (!preChecked && !par.innerHTML.match(definitionMarker))
                return;
            // create the <dl> element that is to replace the paragraph element
            const defList = document.createElement('dl');
            let startOfLine = true;
            let itemElement;
            // fill the new <dl> with clones of the nodes in the original <p>
            par.childNodes.forEach(node => {
                if ('tagName' in node && node.tagName === "BR") {
                    startOfLine = true;
                    return;
                }
                const clone = node.cloneNode(true);
                if (startOfLine) {
                    if (node.textContent.match(definitionMarker)) {
                        itemElement = defList.createEl('dd');
                        clone.textContent = node.textContent.slice(4);
                    }
                    else if (node.textContent.length <= 100) {
                        // a term can't reasonably be longer than 100 chars
                        itemElement = defList.createEl('dt');
                    }
                    else {
                        itemElement = defList.createEl('p');
                    }
                    startOfLine = false;
                }
                itemElement.append(clone);
            });
            // put the <dl> in place of the <p>
            par.replaceWith(defList);
        });
        resultCallback(null);
    });
};
/* 4. The PluginSettingTab for this plugin's settings. */
class DefinitionListSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.name = plugin.manifest.name;
        this.settings = plugin.settings;
        this.cssElement = plugin.cssElement;
        this.saveChanges = plugin.saveData.bind(plugin);
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('style', { text: `
			.mod-toggle {
				border-top: none;
			}
			.example {
				margin-top: 10px;
				height: auto;
				padding: 4px;
				background-color: rgba(150, 150, 150, 0.1);
			}
			.example > dl {
				margin-block: 0;
			}
		` });
        containerEl.createEl('h2', { text: this.name });
        // The Settings items
        let colorSett;
        new obsidian.Setting(containerEl)
            .setName('Terms')
            .setDesc('Font color')
            .addColorPicker(cp => {
            cp.setValue(this.settings.dtcolor)
                .onChange(newColor => {
                console.debug('color set to', newColor);
                this.settings.dtcolor = newColor;
                this.cssElement.sheet.insertRule(`:root {
							--dtcolor: ${newColor};
						}`, this.cssElement.sheet.cssRules.length);
                this.saveChanges(this.settings);
            });
            colorSett = cp;
        });
        let weightSett;
        new obsidian.Setting(containerEl)
            .setDesc('Bold font')
            .addToggle(tog => {
            tog.setValue(this.settings.dtbold)
                .onChange(newWeight => {
                console.debug('bold set to', newWeight);
                this.settings.dtbold = newWeight;
                this.cssElement.sheet.insertRule(`:root {
						--dtweight: ${newWeight ? 'bold' : 'inherit'}`, this.cssElement.sheet.cssRules.length);
                this.saveChanges(this.settings);
            });
            weightSett = tog;
        });
        let styleSett;
        new obsidian.Setting(containerEl)
            .setDesc('Italic font')
            .addToggle(tog => {
            tog.setValue(this.settings.dtitalic)
                .onChange(newStyle => {
                console.debug('italic set to', newStyle);
                this.settings.dtitalic = newStyle;
                this.cssElement.sheet.insertRule(`:root {
						--dtstyle: ${newStyle ? 'italic' : 'inherit'}`, this.cssElement.sheet.cssRules.length);
                this.saveChanges(this.settings);
            });
            styleSett = tog;
        });
        let indentSett;
        new obsidian.Setting(containerEl)
            .setName('Definitions')
            .setDesc('Indentation of the definitions')
            .addSlider(sl => {
            sl.setLimits(0, 50, 1)
                .setValue(this.settings.ddindentation)
                .setDynamicTooltip()
                .onChange(value => {
                console.debug('indentation set to', value, 'px');
                this.settings.ddindentation = value;
                this.cssElement.sheet.insertRule(`:root {
							--ddindentation: ${value}px;
						}`, this.cssElement.sheet.cssRules.length);
                this.saveChanges(this.settings);
            });
            indentSett = sl;
        });
        new obsidian.Setting(containerEl)
            .addButton(bt => bt.setButtonText('Reset to defaults')
            .setTooltip('Color: dark blue, #555577\nIndentation: 30 pixels')
            .onClick(evt => {
            colorSett.setValue(defaultSettings.dtcolor);
            weightSett.setValue(defaultSettings.dtbold);
            styleSett.setValue(defaultSettings.dtitalic);
            indentSett.setValue(defaultSettings.ddindentation);
        }));
        // The preview that shows how the settings work out
        containerEl.createEl('div', { cls: 'setting-item-name', text: 'Preview' });
        containerEl.createEl('div', { cls: 'example markdown-preview-view' })
            .innerHTML = `
			<dl>
			<dt>definition list</dt>
			<dd>a list of pairs <i>(term, definition)</i> where each
			term is on its own line and its definition is on the line(s) below.
			The definition is usually indented to set it apart from the term</dd>
			<dt>indentation</dt>
			<dd>when a line or paragraph starts at a distance from the left margin</dd>
			</dl>
		`;
    }
}

module.exports = DefinitionListPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
