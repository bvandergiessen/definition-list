'use strict';

var obsidian = require('obsidian');
var view = require('@codemirror/view');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var defaultSettings = {
    dtcolor: '#555577',
    ddindentation: 30
};
var DefinitionListPlugin = /** @class */ (function (_super) {
    __extends(DefinitionListPlugin, _super);
    function DefinitionListPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatDefinitionLists = function (element, context) {
            /* The post-processor is called
             *  - when switching to Reading view: once per div that has changed
             *  - when exporting to PDF: on the whole page div
             *  - when the document first enters Reading view: on every child-div of page div
             */
            /* In direct descendants of type paragraph, look for definition lists.
             * Return as soon as possible.  */
            var paragraphs = element.findAll(':scope > p, :scope > div > p');
            var nothingToDo = true;
            for (var _i = 0, paragraphs_1 = paragraphs; _i < paragraphs_1.length; _i++) {
                var par = paragraphs_1[_i];
                if (par.innerHTML.includes('<br>\n:   ')) {
                    nothingToDo = false;
                    break;
                }
            }
            if (nothingToDo)
                return;
            return new Promise(function (resultCallback, errorCallback) {
                // TODO: some error checking
                paragraphs.forEach(function (par) {
                    if (!par.innerHTML.includes('<br>\n:   '))
                        return;
                    // create the <dl> element that is to replace the paragraph element
                    var defList = document.createElement('dl');
                    var startOfLine = true;
                    var itemElement;
                    // fill the new <dl> with clones of the nodes in the original <p>
                    par.childNodes.forEach(function (node) {
                        if ('tagName' in node && node.tagName === "BR") {
                            startOfLine = true;
                            return;
                        }
                        var clone = node.cloneNode(true);
                        if (startOfLine) {
                            var matchDef = node.textContent.match(DefinitionListPlugin.definitionMarker);
                            if (matchDef) {
                                itemElement = defList.createEl('dd');
                                clone.textContent = node.textContent.slice(matchDef[0].length);
                            }
                            else {
                                itemElement = defList.createEl('dt');
                            }
                            startOfLine = false;
                        }
                        itemElement.append(clone);
                    });
                    // put the <dl> in place of the <p>
                    par.replaceWith(defList);
                });
                resultCallback(null);
            });
        };
        return _this;
    }
    DefinitionListPlugin.prototype.onInit = function () { };
    DefinitionListPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        console.log("Loading plugin ".concat(this.manifest.name, " v").concat(this.manifest.version));
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{}, defaultSettings];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        this.cssElement = document.createElement('style');
                        this.cssElement.textContent = ":root {\n\t\t\t--dtcolor: ".concat(this.settings.dtcolor, ";\n\t\t\t--ddindentation: ").concat(this.settings.ddindentation, "px;\t\n\t\t}");
                        document.head.appendChild(this.cssElement);
                        this.registerEditorExtension(liveUpdateDefinitionLists);
                        this.registerMarkdownPostProcessor(this.formatDefinitionLists, 99);
                        this.addSettingTab(new DefinitionListSettingTab(this.app, this));
                        return [2 /*return*/];
                }
            });
        });
    };
    DefinitionListPlugin.prototype.onunload = function () {
        console.log("Unloading plugin ".concat(this.manifest.name));
        if (this.cssElement)
            this.cssElement.remove();
    };
    DefinitionListPlugin.definitionMarker = /^\n?: {3}/;
    return DefinitionListPlugin;
}(obsidian.Plugin));
/* The ViewPlugin class is generic: it requires an underlying type, a subclass of
* the PluginValue class. That is to be the first argument passed into the class method
* .fromClass() which returns a ViewPlugin instance with that underlying type.
* The second argument of that class method, to give additional details, is a PluginSpec
* instance with the same underlying type. It has zero or more of the properties eventHandlers,
* eventObservers, provide, and decorations. The latter is a function that, when passed an
* instance of the underlying class, returns a DecorationSet - in this case the function
* simply returns the .decorations instance property. */
var liveUpdateDefinitionLists = view.ViewPlugin.fromClass(/** @class */ (function () {
    function class_1(view$1) {
        this.MARKER = ':   ';
        this.TERM_CLASS = 'view-dt';
        this.DEF_CLASS = 'view-dd';
        this.MARKER_CLASS = 'view-dd-marker';
        this.TERM_DEC = view.Decoration.line({ class: this.TERM_CLASS });
        this.DEF_DEC = view.Decoration.line({ class: this.DEF_CLASS });
        this.MARKER_DEC = view.Decoration.mark({ class: this.MARKER_CLASS });
        this.decorations = view.Decoration.none;
    }
    /* this.decorations should be a cumulative array of all the decorations (i.e.
    * class changes) we have chosen to add to line elements. So we always add to it
    * or modify an existing entry, rather than instantiating it anew.
    * Note that its type, DecorationSet, is a RangeSet of items of the underlying
    * type Decoration. Such a RangeSet object has properties and methods
    * .size (number of elements); .iter() with optional arg from, an offset that
    * lies in or before the first to be iterated; .update(RangeSetUpdate) to add
    * or remove them (returns the new version); .between(from, to, func) run func
    * on every Decoration between the offsets from and to; .map(ChangeDesc). */
    class_1.prototype.update = function (update) {
        var _a;
        if (update.docChanged || update.selectionSet) 
        /* other boolean properties that may be useful:
        *  .viewportChanged: viewport or visible ranges have changed
        *  .geometryChanged: editor size or the document itself changed
        *  .focusChanged: maybe some switch to another document, panel etc.;
        *  change in View between Editing and Rendering view; but
        *  when the document/Editing is activated, .geometryChanged is also true.
        */
        {
            var state = update.view.state;
            var cursorPos = state.selection.main.head;
            // the Line object that represents the current line of the document
            // note that state.doc is an object of class Text
            var currentLine = state.doc.lineAt(cursorPos);
            // the text of the following line
            var nextLineText = (state.doc.lines === currentLine.number) ? '' :
                state.doc.line(currentLine.number + 1).text;
            if (!currentLine.text.startsWith(this.MARKER) &&
                !nextLineText.startsWith(this.MARKER))
                return;
            // TODO: two terms before one definition
            // TODO: parse all definition lists when first opening Edit View, or at
            //  least those inside the viewport (+ update if update.viewportChanged)
            // TODO: implement removal of class when it's not a DL anymore after an edit
            // FIXME: empty <dt> keeps getting additional decorations
            // Perform a few checks before adding any decorations
            var lineClasses = ((_a = update.view
                .domAtPos(cursorPos).node.parentElement.closest('.cm-line')) === null || _a === void 0 ? void 0 : _a.classList)
                || { contains: function (s) { return false; } };
            // - No definition lists inside a code block
            if (lineClasses.contains('HyperMD-codeblock'))
                return;
            // - Don't add a class when it's already been done
            if (lineClasses.contains(this.DEF_CLASS) ||
                lineClasses.contains(this.TERM_CLASS))
                return;
            // Finally, as all criteria have been met, we get to work
            var newDecorations = currentLine.text.startsWith(this.MARKER)
                ? [
                    this.DEF_DEC.range(currentLine.from),
                    this.MARKER_DEC.range(currentLine.from, currentLine.from + 4)
                ] : [
                this.TERM_DEC.range(currentLine.from)
            ];
            this.decorations = this.decorations.update({ add: newDecorations });
            console.debug(this.decorations.size, 'decorations');
            /* the argument for .update is of class RangeSetUpdate<Decoration>,
            * and RangeSetUpdate is a typedef of an Object with optional
            * property .add of class readonly Range<Decoration>; that in turn has
            * instance properties from, to, and the Decoration.
            * You can create a Range<Decoration> by creating a Decoration and
            * applying its .range method (inherited from its superclass RangeValue).
            * Note that .update doesn't modify the instance but returns it. */
        }
        // else if (update.viewportChanged) console.log('viewport changed');
        // else if (update.geometryChanged) console.log('geometry changed');
    };
    return class_1;
}()), {
    decorations: function (v) { return v.decorations; },
});
var DefinitionListSettingTab = /** @class */ (function (_super) {
    __extends(DefinitionListSettingTab, _super);
    function DefinitionListSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.name = plugin.manifest.name;
        _this.settings = plugin.settings;
        _this.cssElement = plugin.cssElement;
        _this.saveChanges = plugin.saveData.bind(plugin);
        return _this;
    }
    DefinitionListSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('style', { text: "\n\t\t\t.example {\n\t\t\t\tmargin-top: 10px;\n\t\t\t\theight: auto;\n\t\t\t\tpadding: 4px;\n\t\t\t\tbackground-color: rgba(150, 150, 150, 0.1);\n\t\t\t}\n\t\t\t.example > dl {\n\t\t\t\tmargin-block: 0;\n\t\t\t}\n\t\t" });
        containerEl.createEl('h2', { text: this.name });
        // The Settings items
        var colorSett;
        new obsidian.Setting(containerEl)
            .setName('Color of Terms')
            .setDesc('Terms in a definition list are displayed bold, in this color')
            .addColorPicker(function (cp) {
            cp.setValue(_this.settings.dtcolor)
                .onChange(function (newColor) {
                console.debug('color set to', newColor);
                _this.settings.dtcolor = newColor;
                _this.cssElement.sheet.insertRule(":root {\n\t\t\t\t\t\t\t--dtcolor: ".concat(newColor, ";\n\t\t\t\t\t\t}"), _this.cssElement.sheet.cssRules.length);
                _this.saveChanges(_this.settings);
            });
            colorSett = cp;
        });
        var indentSett;
        new obsidian.Setting(containerEl)
            .setName('Indentation of Definitions')
            .setDesc('Definitions in a definition list are indented by this number of pixels')
            .addSlider(function (sl) {
            sl.setLimits(0, 50, 1)
                .setValue(_this.settings.ddindentation)
                .setDynamicTooltip()
                .onChange(function (value) {
                console.debug('indentation set to', value, 'px');
                _this.settings.ddindentation = value;
                _this.cssElement.sheet.insertRule(":root {\n\t\t\t\t\t\t\t--ddindentation: ".concat(value, "px;\n\t\t\t\t\t\t}"), _this.cssElement.sheet.cssRules.length);
                _this.saveChanges(_this.settings).then(console.debug);
            });
            indentSett = sl;
        });
        new obsidian.Setting(containerEl)
            .addButton(function (bt) { return bt.setButtonText('Reset')
            .setTooltip('Color: dark blue, #555577\nIndentation: 30 pixels')
            .onClick(function (evt) {
            colorSett.setValue(defaultSettings.dtcolor);
            indentSett.setValue(defaultSettings.ddindentation);
        }); });
        // The preview that shows how the settings work out
        containerEl.createEl('div', { cls: 'setting-item-name', text: 'Preview' });
        containerEl.createEl('div', { cls: 'example markdown-preview-view' })
            .innerHTML = "\n\t\t\t<dl>\n\t\t\t<dt>definition list</dt>\n\t\t\t<dd>a list of pairs <i>(term, definition)</i> where each\n\t\t\tterm is on its own line and its definition is on the line(s) below.\n\t\t\tThe definition is usually indented to set it apart from the term</dd>\n\t\t\t<dt>indentation</dt>\n\t\t\t<dd>when a line or paragraph starts at a distance from the left margin</dd>\n\t\t\t</dl>\n\t\t";
    };
    return DefinitionListSettingTab;
}(obsidian.PluginSettingTab));

module.exports = DefinitionListPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
