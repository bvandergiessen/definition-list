'use strict';

var obsidian = require('obsidian');
var view = require('@codemirror/view');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var DefinitionListPlugin = /** @class */ (function (_super) {
    __extends(DefinitionListPlugin, _super);
    function DefinitionListPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatDefinitionLists = function (element, context) {
            /* The post-processor is called
             *  - when switching to Reading view: once per div that has changed
             *  - when exporting to PDF: on the whole page div
             *  - when the document first enters Reading view: on every child-div of page div
             */
            /* In direct descendants of type paragraph, look for definition lists.
             * Return as soon as possible.  */
            var paragraphs = element.findAll(':scope > p, :scope > div > p');
            var nothingToDo = true;
            for (var _i = 0, paragraphs_1 = paragraphs; _i < paragraphs_1.length; _i++) {
                var par = paragraphs_1[_i];
                if (par.innerHTML.includes('<br>\n:   ')) {
                    nothingToDo = false;
                    break;
                }
            }
            if (nothingToDo)
                return;
            return new Promise(function (resultCallback, errorCallback) {
                // TODO: some error checking
                paragraphs.forEach(function (par) {
                    if (!par.innerHTML.includes('<br>\n:   '))
                        return;
                    // create the <dl> element that is to replace the paragraph element
                    var defList = document.createElement('dl');
                    var startOfLine = true;
                    var itemElement;
                    // fill the new <dl> with clones of the nodes in the original <p>
                    par.childNodes.forEach(function (node) {
                        if ('tagName' in node && node.tagName === "BR") {
                            startOfLine = true;
                            return;
                        }
                        var clone = node.cloneNode(true);
                        if (startOfLine) {
                            var matchDef = node.textContent.match(DefinitionListPlugin.definitionMarker);
                            if (matchDef) {
                                itemElement = defList.createEl('dd');
                                clone.textContent = node.textContent.slice(matchDef[0].length);
                            }
                            else {
                                itemElement = defList.createEl('dt');
                            }
                            startOfLine = false;
                        }
                        itemElement.append(clone);
                    });
                    // put the <dl> in place of the <p>
                    par.replaceWith(defList);
                });
                resultCallback(null);
            });
        };
        return _this;
    }
    DefinitionListPlugin.prototype.onInit = function () { };
    DefinitionListPlugin.prototype.onload = function () {
        console.log("Loading plugin Definition List v".concat(this.manifest.version));
        this.registerMarkdownPostProcessor(this.formatDefinitionLists, 99);
        this.addSettingTab(new DefinitionListSettingTab(this.app, this));
        this.registerEditorExtension(liveUpdateDefinitionLists);
    };
    DefinitionListPlugin.prototype.onunload = function () {
        console.log('Unloading plugin Definition List');
    };
    DefinitionListPlugin.definitionMarker = /^\n?:   /;
    return DefinitionListPlugin;
}(obsidian.Plugin));
/* The ViewPlugin class is generic: it requires an underlying type, a subclass of
* the PluginValue class. That is to be the first argument passed into the class method
* .fromClass() which returns a ViewPlugin instance with that underlying type.
* The second argument of that class method, to give additional details, is a PluginSpec
* instance with the same underlying type. It has zero or more of the properties eventHandlers,
* eventObservers, provide, and decorations. The latter is a function that, when passed an
* instance of the underlying class, returns a DecorationSet - in this case the function
* simply returns the .decorations instance property. */
var liveUpdateDefinitionLists = view.ViewPlugin.fromClass(/** @class */ (function () {
    function class_1(view$1) {
        this.TERM_CLASS = 'view-dt';
        this.DEF_CLASS = 'view-dd';
        this.decorations = view.Decoration.none;
    }
    /* this.decorations should be a cumulative array of all the decorations (i.e.
    * class changes) we have chosen to add to line elements. So we always add to it
    * or modify an existing entry, rather than instantiating it anew.
    * Note that its type, DecorationSet, is a RangeSet of items of the underlying
    * type Decoration. Such a RangeSet object has properties and methods
    * .size (number of elements); .iter() with optional arg from, an offset that
    * lies in or before the first to be iterated; .update(RangeSetUpdate) to add
    * or remove them (returns the new version); .between(from, to, func) run func
    * on every Decoration between the offsets from and to; .map(ChangeDesc). */
    class_1.prototype.update = function (update) {
        var _a;
        if (update.docChanged || update.selectionSet) 
        /* other boolean properties that may be useful:
        *  .viewportChanged: viewport or visible ranges have changed
        *  .geometryChanged: editor size or the document itself changed
        *  .focusChanged: maybe some switch to another document, panel etc.;
        *  change in View between Editing and Rendering view; but
        *  when the document/Editing is activated, .geometryChanged is also true.
        */
        {
            var state = update.view.state;
            var cursorPos = state.selection.main.head;
            // the Line object that represents the current line of the document
            // note that state.doc is an object of class Text
            var currentLine = state.doc.lineAt(cursorPos);
            // the text of the following line
            var nextLineText = (state.doc.lines === currentLine.number) ? '' :
                state.doc.line(currentLine.number + 1).text;
            if (!currentLine.text.startsWith(':   ') && !nextLineText.startsWith(':   '))
                return;
            // TODO: two terms before one definition
            // TODO: put : and first spaces in a separate div or so
            //  and then in CSS say div:not(.cm-active)>.leading-chars {display: none;}
            // TODO: parse all definition lists when first opening Edit View, or at
            //  least those inside the viewport
            // TODO: implement removal of class when it's not a DL anymore after an edit
            // Perform a few checks before adding any classes
            var lineClasses = ((_a = update.view.domAtPos(cursorPos).node.parentElement.closest('.cm-line')) === null || _a === void 0 ? void 0 : _a.classList) ||
                { contains: function (s) { return false; } };
            // No definition lists inside a code block
            if (lineClasses.contains('HyperMD-codeblock'))
                return;
            // Don't add a class when it's already been done
            if (lineClasses.contains(this.DEF_CLASS) ||
                lineClasses.contains(this.TERM_CLASS))
                return;
            // Finally, as all criteria have been met, we get to work
            var lineclass = (currentLine.text.startsWith(':   ')) ? this.DEF_CLASS : this.TERM_CLASS;
            this.decorations = this.decorations.update({ add: [view.Decoration
                        .line({ class: lineclass })
                        .range(currentLine.from)] }); // line decorations are 0-length
            /* the argument for .update is of class RangeSetUpdate<Decoration>,
            * and RangeSetUpdate is a typedef of an Object with optional
            * property .add of class readonly Range<Decoration>; that in turn has
            * instance properties from, to, and the Decoration.
            * You can create a Range<Decoration> by creating a Decoration and
            * applying its .range method (inherited from its superclass RangeValue).
            * Note that .update doesn't modify the instance but returns it. */
        }
        // if (update.viewportChanged) console.log('viewport changed');
        // if (update.geometryChanged) console.log('geometry changed');
    };
    return class_1;
}()), {
    decorations: function (v) { return v.decorations; },
});
var DefinitionListSettingTab = /** @class */ (function (_super) {
    __extends(DefinitionListSettingTab, _super);
    function DefinitionListSettingTab() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefinitionListSettingTab.prototype.display = function () {
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for my awesome plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Setting #1')
            .setDesc('It\'s a secret')
            .addText(function (text) { return text.setPlaceholder('Enter your secret')
            .setValue('')
            .onChange(function (value) {
            console.log('Secret: ' + value);
        }); });
    };
    return DefinitionListSettingTab;
}(obsidian.PluginSettingTab));

module.exports = DefinitionListPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
